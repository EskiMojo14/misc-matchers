// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`lastCalledWithContext > includes the custom mock name in the error message 1`] = `
<d>expect(</><r>named-mock</><d>).</>not<d>.</>lastCalledWithContext<d>(</><g>expected</><d>)</>

Expected: not <g>"foo"</>

Number of calls: <r>1</>
`;

exports[`lastCalledWithContext > works only on spies or vi.fn 1`] = `utils.printWithType is not a function`;

exports[`lastCalledWithContext > works when not called 1`] = `
<d>expect(</><r>spy</><d>).</>lastCalledWithContext<d>(</><g>expected</><d>)</>

Expected: <g>"foo"</>

Number of calls: <r>0</>
`;

exports[`lastCalledWithContext > works with a context that doesn't match 1`] = `
<d>expect(</><r>spy</><d>).</>lastCalledWithContext<d>(</><g>expected</><d>)</>

Expected: <g>"foo"</>
Received: <r>"bar"</>
Number of calls: <r>1</>
`;

exports[`lastCalledWithContext > works with a context that doesn't match with matchers 1`] = `
<d>expect(</><r>spy</><d>).</>lastCalledWithContext<d>(</><g>expected</><d>)</>

Expected: <g>Any<Number></>
Received: <r>"bar"</>
Number of calls: <r>1</>
`;

exports[`lastCalledWithContext > works with a context that matches 1`] = `
<d>expect(</><r>spy</><d>).</>not<d>.</>lastCalledWithContext<d>(</><g>expected</><d>)</>

Expected: not <g>"foo"</>

Number of calls: <r>1</>
`;

exports[`lastCalledWithContext > works with a context that matches with a matcher 1`] = `
<d>expect(</><r>spy</><d>).</>not<d>.</>lastCalledWithContext<d>(</><g>expected</><d>)</>

Expected: not <g>Any<String></>
Received:     <d>"foo"</>

Number of calls: <r>1</>
`;

exports[`nthCalledWithContext > includes the custom mock name in the error message 1`] = `
<d>expect(</><r>named-mock</><d>).</>not<d>.</>nthCalledWithContext<d>(</>n<d>, </><g>expected</><d>)</>

n: 1
Expected: not <g>"foo"</>

Number of calls: <r>1</>
`;

exports[`nthCalledWithContext > works only on spies or vi.fn 1`] = `utils.printWithType is not a function`;

exports[`nthCalledWithContext > works when not called 1`] = `
<d>expect(</><r>spy</><d>).</>nthCalledWithContext<d>(</>n<d>, </><g>expected</><d>)</>

n: 1
Expected: <g>"foo"</>

Number of calls: <r>0</>
`;

exports[`nthCalledWithContext > works with a context that doesn't match 1`] = `
<d>expect(</><r>spy</><d>).</>nthCalledWithContext<d>(</>n<d>, </><g>expected</><d>)</>

n: 1
Expected: <g>"foo"</>
Received: <r>"bar"</>
Number of calls: <r>1</>
`;

exports[`nthCalledWithContext > works with a context that doesn't match with matchers 1`] = `
<d>expect(</><r>spy</><d>).</>nthCalledWithContext<d>(</>n<d>, </><g>expected</><d>)</>

n: 1
Expected: <g>Any<Number></>
Received: <r>"bar"</>
Number of calls: <r>1</>
`;

exports[`nthCalledWithContext > works with a context that matches 1`] = `
<d>expect(</><r>spy</><d>).</>not<d>.</>nthCalledWithContext<d>(</>n<d>, </><g>expected</><d>)</>

n: 1
Expected: not <g>"foo"</>

Number of calls: <r>1</>
`;

exports[`nthCalledWithContext > works with a context that matches with a matcher 1`] = `
<d>expect(</><r>spy</><d>).</>not<d>.</>nthCalledWithContext<d>(</>n<d>, </><g>expected</><d>)</>

n: 1
Expected: not <g>Any<String></>
Received:     <d>"foo"</>

Number of calls: <r>1</>
`;

exports[`toBeCalledWithContext > includes the custom mock name in the error message 1`] = `
<d>expect(</><r>named-mock</><d>).</>not<d>.toBeCalledWithContext(</><g>expected</><d>)</>

Expected: not <g>"foo"</>
Received:     <d>"foo"</>

Number of calls: <r>1</>
`;

exports[`toBeCalledWithContext > works only on spies or vi.fn 1`] = `utils.printWithType is not a function`;

exports[`toBeCalledWithContext > works when not called 1`] = `
<d>expect(</><r>spy</><d>).toBeCalledWithContext(</><g>expected</><d>)</>

Expected: <g>"foo"</>

Number of calls: <r>0</>
`;

exports[`toBeCalledWithContext > works with a context that doesn't match 1`] = `
<d>expect(</><r>spy</><d>).toBeCalledWithContext(</><g>expected</><d>)</>

Expected: <g>"foo"</>
Received: <r>"bar"</>
Number of calls: <r>1</>
`;

exports[`toBeCalledWithContext > works with a context that doesn't match with matchers 1`] = `
<d>expect(</><r>spy</><d>).toBeCalledWithContext(</><g>expected</><d>)</>

Expected: <g>Any<Number></>
Received: <r>"bar"</>
Number of calls: <r>1</>
`;

exports[`toBeCalledWithContext > works with a context that matches 1`] = `
<d>expect(</><r>spy</><d>).</>not<d>.toBeCalledWithContext(</><g>expected</><d>)</>

Expected: not <g>"foo"</>
Received:     <d>"foo"</>

Number of calls: <r>1</>
`;

exports[`toBeCalledWithContext > works with a context that matches with a matcher 1`] = `
<d>expect(</><r>spy</><d>).</>not<d>.toBeCalledWithContext(</><g>expected</><d>)</>

Expected: not <g>Any<String></>
Received:     <d>"foo"</>

Number of calls: <r>1</>
`;

exports[`toHaveBeenCalledWithContext > includes the custom mock name in the error message 1`] = `
<d>expect(</><r>named-mock</><d>).</>not<d>.toHaveBeenCalledWithContext(</><g>expected</><d>)</>

Expected: not <g>"foo"</>
Received:     <d>"foo"</>

Number of calls: <r>1</>
`;

exports[`toHaveBeenCalledWithContext > works only on spies or vi.fn 1`] = `utils.printWithType is not a function`;

exports[`toHaveBeenCalledWithContext > works when not called 1`] = `
<d>expect(</><r>spy</><d>).toHaveBeenCalledWithContext(</><g>expected</><d>)</>

Expected: <g>"foo"</>

Number of calls: <r>0</>
`;

exports[`toHaveBeenCalledWithContext > works with a context that doesn't match 1`] = `
<d>expect(</><r>spy</><d>).toHaveBeenCalledWithContext(</><g>expected</><d>)</>

Expected: <g>"foo"</>
Received: <r>"bar"</>
Number of calls: <r>1</>
`;

exports[`toHaveBeenCalledWithContext > works with a context that doesn't match with matchers 1`] = `
<d>expect(</><r>spy</><d>).toHaveBeenCalledWithContext(</><g>expected</><d>)</>

Expected: <g>Any<Number></>
Received: <r>"bar"</>
Number of calls: <r>1</>
`;

exports[`toHaveBeenCalledWithContext > works with a context that matches 1`] = `
<d>expect(</><r>spy</><d>).</>not<d>.toHaveBeenCalledWithContext(</><g>expected</><d>)</>

Expected: not <g>"foo"</>
Received:     <d>"foo"</>

Number of calls: <r>1</>
`;

exports[`toHaveBeenCalledWithContext > works with a context that matches with a matcher 1`] = `
<d>expect(</><r>spy</><d>).</>not<d>.toHaveBeenCalledWithContext(</><g>expected</><d>)</>

Expected: not <g>Any<String></>
Received:     <d>"foo"</>

Number of calls: <r>1</>
`;

exports[`toHaveBeenLastCalledWithContext > includes the custom mock name in the error message 1`] = `
<d>expect(</><r>named-mock</><d>).</>not<d>.</>toHaveBeenLastCalledWithContext<d>(</><g>expected</><d>)</>

Expected: not <g>"foo"</>

Number of calls: <r>1</>
`;

exports[`toHaveBeenLastCalledWithContext > works only on spies or vi.fn 1`] = `utils.printWithType is not a function`;

exports[`toHaveBeenLastCalledWithContext > works when not called 1`] = `
<d>expect(</><r>spy</><d>).</>toHaveBeenLastCalledWithContext<d>(</><g>expected</><d>)</>

Expected: <g>"foo"</>

Number of calls: <r>0</>
`;

exports[`toHaveBeenLastCalledWithContext > works with a context that doesn't match 1`] = `
<d>expect(</><r>spy</><d>).</>toHaveBeenLastCalledWithContext<d>(</><g>expected</><d>)</>

Expected: <g>"foo"</>
Received: <r>"bar"</>
Number of calls: <r>1</>
`;

exports[`toHaveBeenLastCalledWithContext > works with a context that doesn't match with matchers 1`] = `
<d>expect(</><r>spy</><d>).</>toHaveBeenLastCalledWithContext<d>(</><g>expected</><d>)</>

Expected: <g>Any<Number></>
Received: <r>"bar"</>
Number of calls: <r>1</>
`;

exports[`toHaveBeenLastCalledWithContext > works with a context that matches 1`] = `
<d>expect(</><r>spy</><d>).</>not<d>.</>toHaveBeenLastCalledWithContext<d>(</><g>expected</><d>)</>

Expected: not <g>"foo"</>

Number of calls: <r>1</>
`;

exports[`toHaveBeenLastCalledWithContext > works with a context that matches with a matcher 1`] = `
<d>expect(</><r>spy</><d>).</>not<d>.</>toHaveBeenLastCalledWithContext<d>(</><g>expected</><d>)</>

Expected: not <g>Any<String></>
Received:     <d>"foo"</>

Number of calls: <r>1</>
`;

exports[`toHaveBeenNthCalledWithContext > includes the custom mock name in the error message 1`] = `
<d>expect(</><r>named-mock</><d>).</>not<d>.</>toHaveBeenNthCalledWithContext<d>(</>n<d>, </><g>expected</><d>)</>

n: 1
Expected: not <g>"foo"</>

Number of calls: <r>1</>
`;

exports[`toHaveBeenNthCalledWithContext > works only on spies or vi.fn 1`] = `utils.printWithType is not a function`;

exports[`toHaveBeenNthCalledWithContext > works when not called 1`] = `
<d>expect(</><r>spy</><d>).</>toHaveBeenNthCalledWithContext<d>(</>n<d>, </><g>expected</><d>)</>

n: 1
Expected: <g>"foo"</>

Number of calls: <r>0</>
`;

exports[`toHaveBeenNthCalledWithContext > works with a context that doesn't match 1`] = `
<d>expect(</><r>spy</><d>).</>toHaveBeenNthCalledWithContext<d>(</>n<d>, </><g>expected</><d>)</>

n: 1
Expected: <g>"foo"</>
Received: <r>"bar"</>
Number of calls: <r>1</>
`;

exports[`toHaveBeenNthCalledWithContext > works with a context that doesn't match with matchers 1`] = `
<d>expect(</><r>spy</><d>).</>toHaveBeenNthCalledWithContext<d>(</>n<d>, </><g>expected</><d>)</>

n: 1
Expected: <g>Any<Number></>
Received: <r>"bar"</>
Number of calls: <r>1</>
`;

exports[`toHaveBeenNthCalledWithContext > works with a context that matches 1`] = `
<d>expect(</><r>spy</><d>).</>not<d>.</>toHaveBeenNthCalledWithContext<d>(</>n<d>, </><g>expected</><d>)</>

n: 1
Expected: not <g>"foo"</>

Number of calls: <r>1</>
`;

exports[`toHaveBeenNthCalledWithContext > works with a context that matches with a matcher 1`] = `
<d>expect(</><r>spy</><d>).</>not<d>.</>toHaveBeenNthCalledWithContext<d>(</>n<d>, </><g>expected</><d>)</>

n: 1
Expected: not <g>Any<String></>
Received:     <d>"foo"</>

Number of calls: <r>1</>
`;
