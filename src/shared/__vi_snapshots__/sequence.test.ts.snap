// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`containingEqualSequence > fails if only part of the sequence is found 1`] = `expected { array: [ 1, 2, 3 ] } to deeply equal { Object (array) }`;

exports[`containingEqualSequence > fails if only part of the sequence is found 2`] = `expected { array: Set{ 1, 2, 3 } } to deeply equal { Object (array) }`;

exports[`containingEqualSequence > fails if the sequence is not found 1`] = `expected { array: [ 1, 2, 3 ] } to deeply equal { Object (array) }`;

exports[`containingEqualSequence > fails if the sequence is not found 2`] = `expected { array: Set{ 1, 2, 3 } } to deeply equal { Object (array) }`;

exports[`containingSequence > fails if only part of the sequence is found 1`] = `expected { array: [ 1, 2, 3 ] } to deeply equal { array: containingSequence<1, 3> }`;

exports[`containingSequence > fails if only part of the sequence is found 2`] = `expected { array: Set{ 1, 2, 3 } } to deeply equal { array: containingSequence<1, 3> }`;

exports[`containingSequence > fails if the sequence is not found 1`] = `expected { array: [ 1, 2, 3 ] } to deeply equal { array: containingSequence<2, 1> }`;

exports[`containingSequence > fails if the sequence is not found 2`] = `expected { array: Set{ 1, 2, 3 } } to deeply equal { array: containingSequence<2, 1> }`;

exports[`containingStrictEqualSequence > fails if only part of the sequence is found 1`] = `expected { array: [ { value: 1 }, …(2) ] } to deeply equal { …(1) }`;

exports[`containingStrictEqualSequence > fails if only part of the sequence is found 2`] = `expected { array: Set{ { value: 1 }, …(2) } } to deeply equal { …(1) }`;

exports[`containingStrictEqualSequence > fails if the sequence is not found 1`] = `expected { array: [ { value: 1 }, …(2) ] } to deeply equal { …(1) }`;

exports[`containingStrictEqualSequence > fails if the sequence is not found 2`] = `expected { array: Set{ { value: 1 }, …(2) } } to deeply equal { …(1) }`;

exports[`sequence > fails if not passed any predicates 1`] = `
<d>expect.</b>sequence<d>(</b><g>expected</g><d>)</b>

<b>Matcher error</b>: At least one predicate must be provided
`;

exports[`sequence > fails if the iterable is too short 1`] = `expected { array: [ +0 ] } to deeply equal { array: sequence{…} }`;

exports[`sequence > fails if the iterable is too short 2`] = `expected { array: Set{ +0 } } to deeply equal { array: sequence{…} }`;

exports[`sequence > fails with a non-iterable 1`] = `expected { array: +0 } to deeply equal { array: sequence<(x) => x === 0> }`;

exports[`sequence > throws if one of the predicates is not a function 1`] = `
<d>expect.</b>sequence<d>(</b><g>expected</g><d>)</b>

<b>Matcher error</b>: All predicates must be functions

Predicate at index 1 has type:  number
Predicate at index 1 has value: 1
`;

exports[`sequence > works with an array 1`] = `expected { array: [ 1, 2, 3 ] } to deeply equal { array: sequence{…} }`;

exports[`sequence > works with an array 2`] = `expected { array: [ 1, 2, 3 ] } to deeply equal { array: not.sequence{…} }`;

exports[`sequence > works with other iterables 1`] = `expected { array: Set{ 1, 2, 3 } } to deeply equal { array: sequence{…} }`;

exports[`sequence > works with other iterables 2`] = `expected { array: Set{ 1, 2, 3 } } to deeply equal { array: not.sequence{…} }`;

exports[`sequenceOf > fails if the iterable is too short 1`] = `expected { value: [ +0 ] } to deeply equal { value: sequenceOf<0, 1> }`;

exports[`sequenceOf > fails if the iterable is too short 2`] = `expected { value: Set{ +0 } } to deeply equal { value: sequenceOf<0, 1> }`;

exports[`sequenceOf > fails with a non-iterable 1`] = `expected { value: +0 } to deeply equal { value: sequenceOf<0> }`;

exports[`sequenceOf > works with an array 1`] = `expected { value: [ 1, 2, 3 ] } to deeply equal { value: sequenceOf<1, 3, 2> }`;

exports[`sequenceOf > works with an array 2`] = `expected { value: [ 1, 2, 3 ] } to deeply equal { value: not.sequenceOf<1, 2> }`;

exports[`sequenceOf > works with other iterables 1`] = `expected { value: Set{ 1, 2, 3 } } to deeply equal { value: sequenceOf<1, 3, 2> }`;

exports[`sequenceOf > works with other iterables 2`] = `expected { value: Set{ 1, 2, 3 } } to deeply equal { value: not.sequenceOf<1, 2> }`;

exports[`strictSequenceOf > fails if the iterable is too short 1`] = `expected { value: [ { value: +0 } ] } to deeply equal { value: strictSequenceOf{…} }`;

exports[`strictSequenceOf > fails if the iterable is too short 2`] = `expected { value: Set{ { value: +0 } } } to deeply equal { value: strictSequenceOf{…} }`;

exports[`strictSequenceOf > fails with a non-iterable 1`] = `expected { value: +0 } to deeply equal { value: strictSequenceOf<0> }`;

exports[`strictSequenceOf > works with an array 1`] = `expected { value: [ { value: 1 }, …(2) ] } to deeply equal { value: strictSequenceOf{…} }`;

exports[`strictSequenceOf > works with other iterables 1`] = `expected { value: Set{ { value: 1 }, …(2) } } to deeply equal { value: strictSequenceOf{…} }`;

exports[`toContainEqualSequence > fails if only part of the sequence is found 1`] = `
<d>expect(</b><r>received</g><d>).</b>toContainEqualSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>[1, 2, 3]</g> to contain sequence <r>1</g>, <r>3</g>

Full sequence: <r>1</g>, <r>2</g>, <r>3</g>
`;

exports[`toContainEqualSequence > fails if only part of the sequence is found 2`] = `
<d>expect(</b><r>received</g><d>).</b>toContainEqualSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>Set {1, 2, 3}</g> to contain sequence <r>1</g>, <r>3</g>

Full sequence: <r>1</g>, <r>2</g>, <r>3</g>
`;

exports[`toContainEqualSequence > fails if the sequence is not found 1`] = `
<d>expect(</b><r>received</g><d>).</b>toContainEqualSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>[1, 2, 3]</g> to contain sequence <r>2</g>, <r>1</g>

Full sequence: <r>1</g>, <r>2</g>, <r>3</g>
`;

exports[`toContainEqualSequence > fails if the sequence is not found 2`] = `
<d>expect(</b><r>received</g><d>).</b>toContainEqualSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>Set {1, 2, 3}</g> to contain sequence <r>2</g>, <r>1</g>

Full sequence: <r>1</g>, <r>2</g>, <r>3</g>
`;

exports[`toContainSequence > fails if only part of the sequence is found 1`] = `
<d>expect(</b><r>received</g><d>).</b>toContainSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>[1, 2, 3]</g> to contain sequence <r>1</g>, <r>3</g>

Full sequence: <r>1</g>, <r>2</g>, <r>3</g>
`;

exports[`toContainSequence > fails if only part of the sequence is found 2`] = `
<d>expect(</b><r>received</g><d>).</b>toContainSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>Set {1, 2, 3}</g> to contain sequence <r>1</g>, <r>3</g>

Full sequence: <r>1</g>, <r>2</g>, <r>3</g>
`;

exports[`toContainSequence > fails if the sequence is not found 1`] = `
<d>expect(</b><r>received</g><d>).</b>toContainSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>[1, 2, 3]</g> to contain sequence <r>2</g>, <r>1</g>

Full sequence: <r>1</g>, <r>2</g>, <r>3</g>
`;

exports[`toContainSequence > fails if the sequence is not found 2`] = `
<d>expect(</b><r>received</g><d>).</b>toContainSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>Set {1, 2, 3}</g> to contain sequence <r>2</g>, <r>1</g>

Full sequence: <r>1</g>, <r>2</g>, <r>3</g>
`;

exports[`toContainStrictEqualSequence > fails if only part of the sequence is found 1`] = `
<d>expect(</b><r>received</g><d>).</b>toContainStrictEqualSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>[{"value": 1}, {"value": 2}, {"value": 3}]</g> to contain sequence <r>{"value": 1}</g>, <r>{"value": 3}</g>

Full sequence: <r>{"value": 1}</g>, <r>{"value": 2}</g>, <r>{"value": 3}</g>
`;

exports[`toContainStrictEqualSequence > fails if only part of the sequence is found 2`] = `
<d>expect(</b><r>received</g><d>).</b>toContainStrictEqualSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>Set {{"value": 1}, {"value": 2}, {"value": 3}}</g> to contain sequence <r>{"value": 1}</g>, <r>{"value": 3}</g>

Full sequence: <r>{"value": 1}</g>, <r>{"value": 2}</g>, <r>{"value": 3}</g>
`;

exports[`toContainStrictEqualSequence > fails if the sequence is not found 1`] = `
<d>expect(</b><r>received</g><d>).</b>toContainStrictEqualSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>[{"value": 1}, {"value": 2}, {"value": 3}]</g> to contain sequence <r>{"value": 2}</g>, <r>{"value": 1}</g>

Full sequence: <r>{"value": 1}</g>, <r>{"value": 2}</g>, <r>{"value": 3}</g>
`;

exports[`toContainStrictEqualSequence > fails if the sequence is not found 2`] = `
<d>expect(</b><r>received</g><d>).</b>toContainStrictEqualSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>Set {{"value": 1}, {"value": 2}, {"value": 3}}</g> to contain sequence <r>{"value": 2}</g>, <r>{"value": 1}</g>

Full sequence: <r>{"value": 1}</g>, <r>{"value": 2}</g>, <r>{"value": 3}</g>
`;

exports[`toEqualSequence > fails if the iterable is too short 1`] = `
<d>expect(</b><r>received</g><d>).</b>toEqualSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>[0]</g> to have at least 2 items, but it only had 1.
`;

exports[`toEqualSequence > fails if the iterable is too short 2`] = `
<d>expect(</b><r>received</g><d>).</b>toEqualSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>Set {0}</g> to have at least 2 items, but it only had 1.
`;

exports[`toEqualSequence > fails with a non-iterable 1`] = `Expected <r>0</g> to be an iterable, but it was not`;

exports[`toEqualSequence > works with an array 1`] = `
<d>expect(</b><r>received</g><d>).</b>toEqualSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>2</g> to match <r>3</g> at index 1

Full sequence so far: <r>1</g>, <r>2</g>
`;

exports[`toEqualSequence > works with an array 2`] = `
<d>expect(</b><r>received</g><d>).</b>not<d>.</b>toEqualSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>[1, 2, 3]</g> not to match sequence <r>1</g>, <r>2</g>
`;

exports[`toEqualSequence > works with other iterables 1`] = `
<d>expect(</b><r>received</g><d>).</b>toEqualSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>2</g> to match <r>3</g> at index 1

Full sequence so far: <r>1</g>, <r>2</g>
`;

exports[`toEqualSequence > works with other iterables 2`] = `
<d>expect(</b><r>received</g><d>).</b>not<d>.</b>toEqualSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>Set {1, 2, 3}</g> not to match sequence <r>1</g>, <r>2</g>
`;

exports[`toSatisfySequence > fails if not passed any predicates 1`] = `
<d>expect(</b><r>received</g><d>).</b>toSatisfySequence<d>(</b><g>expected</g><d>)</b>

<b>Matcher error</b>: At least one predicate must be provided
`;

exports[`toSatisfySequence > fails if the iterable is too short 1`] = `
<d>expect(</b><r>received</g><d>).</b>toSatisfySequence<d>(</b><g>expected</g><d>)</b>

Expected <r>[0]</g> to have at least 2 items, but it only had 1.
`;

exports[`toSatisfySequence > fails if the iterable is too short 2`] = `
<d>expect(</b><r>received</g><d>).</b>toSatisfySequence<d>(</b><g>expected</g><d>)</b>

Expected <r>Set {0}</g> to have at least 2 items, but it only had 1.
`;

exports[`toSatisfySequence > fails with a non-iterable 1`] = `
<d>expect(</b><r>received</g><d>).</b>toSatisfySequence<d>(</b><g>expected</g><d>)</b>

Expected <r>0</g> to be an iterable
`;

exports[`toSatisfySequence > throws if one of the predicates is not a function 1`] = `
<d>expect(</b><r>received</g><d>).</b>toSatisfySequence<d>(</b><g>expected</g><d>)</b>

<b>Matcher error</b>: All predicates must be functions

Predicate at index 1 has type:  number
Predicate at index 1 has value: 1
`;

exports[`toSatisfySequence > works with an array 1`] = `
<d>expect(</b><r>received</g><d>).</b>toSatisfySequence<d>(</b><g>expected</g><d>)</b>

Expected <r>2</g> to satisfy predicate at index 1.

Full sequence so far: <r>1</g>, <r>2</g>
`;

exports[`toSatisfySequence > works with an array 2`] = `
<d>expect(</b><r>received</g><d>).</b>not<d>.</b>toSatisfySequence<d>(</b><g>expected</g><d>)</b>

Expected <r>[1, 2, 3]</g> not to satisfy sequence
`;

exports[`toSatisfySequence > works with other iterables 1`] = `
<d>expect(</b><r>received</g><d>).</b>toSatisfySequence<d>(</b><g>expected</g><d>)</b>

Expected <r>2</g> to satisfy predicate at index 1.

Full sequence so far: <r>1</g>, <r>2</g>
`;

exports[`toSatisfySequence > works with other iterables 2`] = `
<d>expect(</b><r>received</g><d>).</b>not<d>.</b>toSatisfySequence<d>(</b><g>expected</g><d>)</b>

Expected <r>Set {1, 2, 3}</g> not to satisfy sequence
`;

exports[`toStrictEqualSequence > fails if the iterable is too short 1`] = `
<d>expect(</b><r>received</g><d>).</b>toStrictEqualSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>[{"value": 0}]</g> to have at least 2 items, but it only had 1.
`;

exports[`toStrictEqualSequence > fails if the iterable is too short 2`] = `
<d>expect(</b><r>received</g><d>).</b>toStrictEqualSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>Set {{"value": 0}}</g> to have at least 2 items, but it only had 1.
`;

exports[`toStrictEqualSequence > fails with a non-iterable 1`] = `Expected <r>0</g> to be an iterable, but it was not`;

exports[`toStrictEqualSequence > works with an array 1`] = `
<d>expect(</b><r>received</g><d>).</b>toStrictEqualSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>{"value": 2}</g> to match <r>{"value": 3}</g> at index 1

Full sequence so far: <r>{"value": 1}</g>, <r>{"value": 2}</g>
`;

exports[`toStrictEqualSequence > works with other iterables 1`] = `
<d>expect(</b><r>received</g><d>).</b>toStrictEqualSequence<d>(</b><g>expected</g><d>)</b>

Expected <r>{"value": 2}</g> to match <r>{"value": 3}</g> at index 1

Full sequence so far: <r>{"value": 1}</g>, <r>{"value": 2}</g>
`;
