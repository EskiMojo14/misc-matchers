"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[310],{9863:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>u});var a=n(2540),c=n(3023),s=n(2317);const i={sidebar_position:1},l="Iterables",r={id:"matchers/collections/iterables",title:"Iterables",description:".toBeIterableOf(expected)",source:"@site/docs/matchers/collections/iterables.mdx",sourceDirName:"matchers/collections",slug:"/matchers/collections/iterables",permalink:"/mix-n-matchers/matchers/collections/iterables",draft:!1,unlisted:!1,editUrl:"https://github.com/EskiMojo14/mix-n-matchers/tree/main/website/docs/matchers/collections/iterables.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docs",previous:{title:"Containing Only",permalink:"/mix-n-matchers/matchers/collections/containingOnly"},next:{title:"Records",permalink:"/mix-n-matchers/matchers/collections/records"}},o={},u=[{value:"<code>.toBeIterableOf(expected)</code>",id:"tobeiterableofexpected",level:2},{value:"<code>.toEqualSequence(...sequence)</code>",id:"toequalsequencesequence",level:2},{value:"<code>.toSatisfySequence(...predicates)</code>",id:"tosatisfysequencepredicates",level:2},{value:"<code>.toContainSequence(...sequence)</code>",id:"tocontainsequencesequence",level:2},{value:"<code>.toContainEqualSequence(...sequence)</code>",id:"tocontainequalsequencesequence",level:2},{value:"<code>.toContainSequenceSatisfying(...predicates)</code>",id:"tocontainsequencesatisfyingpredicates",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"iterables",children:"Iterables"}),"\n",(0,a.jsx)(t.h2,{id:"tobeiterableofexpected",children:(0,a.jsx)(t.code,{children:".toBeIterableOf(expected)"})}),"\n",(0,a.jsxs)(t.p,{children:["Also available as an asymmetric matcher, ",(0,a.jsx)(t.code,{children:"expect.iterableOf(expected)"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Use ",(0,a.jsx)(t.code,{children:".toBeIterableOf"})," to assert that a value is an iterable where each item matches the ",(0,a.jsx)(t.code,{children:"expected"})," value, using deep equality."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:".toBeStrictIterableOf(expected)"})," and ",(0,a.jsx)(t.code,{children:"expect.strictIterableOf(expected)"})," are also available to use ",(0,a.jsx)(t.a,{href:"https://jestjs.io/docs/expect#tostrictequalvalue",children:"strict deep equality"}),"."]}),"\n",(0,a.jsx)(s.Z,{name:"toBeIterableOf",children:'\nconst array = [1, 1, 2, 3];\nconst set = new Set(array);\n\nit("is an iterable of the expected values", () => {\n  expect(array).toBeIterableOf(expect.any(Number));\n  expect(set).toBeIterableOf(expect.any(Number));\n});\n'}),"\n",(0,a.jsx)(t.h2,{id:"toequalsequencesequence",children:(0,a.jsx)(t.code,{children:".toEqualSequence(...sequence)"})}),"\n",(0,a.jsxs)(t.p,{children:["Also available as an asymmetric matcher, ",(0,a.jsx)(t.code,{children:"expect.sequenceOf(...sequence)"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Use ",(0,a.jsx)(t.code,{children:".toEqualSequence"})," to assert that a value is an iterable with the exact sequence of values."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:".toStrictEqualSequence(...sequence)"})," and ",(0,a.jsx)(t.code,{children:"expect.strictSequenceOf(...sequence)"})," are also available to use ",(0,a.jsx)(t.a,{href:"https://jestjs.io/docs/expect#tostrictequalvalue",children:"strict deep equality"}),"."]}),"\n",(0,a.jsx)(s.Z,{name:"toEqualSequence",children:'\nconst array = [1, 1, 2, 3];\nconst set = new Set(array);\n\nit("is an iterable with the exact sequence of values", () => {\n  expect(array).toEqualSequence(1, 1, 2, 3);\n  expect(set).toEqualSequence(1, 2, 3);\n});\n'}),"\n",(0,a.jsx)(t.h2,{id:"tosatisfysequencepredicates",children:(0,a.jsx)(t.code,{children:".toSatisfySequence(...predicates)"})}),"\n",(0,a.jsxs)(t.p,{children:["Also available as an asymmetric matcher, ",(0,a.jsx)(t.code,{children:"expect.sequence(...predicates)"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Use ",(0,a.jsx)(t.code,{children:".toSatisfySequence"})," to assert that a value is an iterable where each item satisfies the corresponding predicate."]}),"\n",(0,a.jsx)(s.Z,{name:"toSatisfySequence",children:'\nconst array = [1, 1, 2, 3];\nconst set = new Set(array);\n\nit("is an iterable where each item satisfies the corresponding predicate", () => {\n  expect(array).toSatisfySequence(\n    (value) => value === 1,\n    (value) => value === 1,\n    (value) => value === 2,\n    (value) => value === 3\n  );\n  expect(set).toSatisfySequence(\n    (value) => value === 1,\n    (value) => value === 2,\n    (value) => value === 3\n  );\n});\n'}),"\n",(0,a.jsx)(t.h2,{id:"tocontainsequencesequence",children:(0,a.jsx)(t.code,{children:".toContainSequence(...sequence)"})}),"\n",(0,a.jsxs)(t.p,{children:["Also available as an asymmetric matcher, ",(0,a.jsx)(t.code,{children:"expect.containingSequence(...sequence)"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Use ",(0,a.jsx)(t.code,{children:".toContainSequence"})," to assert that a value is an iterable that contains the expected sequence of values, using reference equality."]}),"\n",(0,a.jsx)(s.Z,{name:"toContainSequence",children:'\nconst array = [1, 1, 2, 3];\nconst set = new Set(array);\n\nit("is an iterable that contains the exact sequence of values", () => {\n  expect(array).toContainSequence(1, 2);\n  expect(set).toContainSequence(1, 2);\n});\n'}),"\n",(0,a.jsx)(t.h2,{id:"tocontainequalsequencesequence",children:(0,a.jsx)(t.code,{children:".toContainEqualSequence(...sequence)"})}),"\n",(0,a.jsxs)(t.p,{children:["Also available as an asymmetric matcher, ",(0,a.jsx)(t.code,{children:"expect.containingEqualSequence(...sequence)"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Use ",(0,a.jsx)(t.code,{children:".toContainEqualSequence"})," to assert that a value is an iterable that contains the expected sequence of values, using deep equality."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:".toContainStrictEqualSequence(...sequence)"})," and ",(0,a.jsx)(t.code,{children:"expect.containingStrictEqualSequence(...sequence)"})," are also available to use ",(0,a.jsx)(t.a,{href:"https://jestjs.io/docs/expect#tostrictequalvalue",children:"strict deep equality"}),"."]}),"\n",(0,a.jsx)(s.Z,{name:"toContainEqualSequence",children:'\nconst array = [1, 1, 2, 3];\nconst set = new Set(array);\n\nit("is an iterable that contains the exact sequence of values", () => {\n  expect(array).toContainEqualSequence(1, 2);\n  expect(set).toContainEqualSequence(1, 2);\n});\n'}),"\n",(0,a.jsx)(t.h2,{id:"tocontainsequencesatisfyingpredicates",children:(0,a.jsx)(t.code,{children:".toContainSequenceSatisfying(...predicates)"})}),"\n",(0,a.jsxs)(t.p,{children:["Also available as an asymmetric matcher, ",(0,a.jsx)(t.code,{children:"expect.containingSequenceSatisfying(...predicates)"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Use ",(0,a.jsx)(t.code,{children:".toContainSequenceSatisfying"})," to assert that a value is an iterable that contains the expected sequence of values, where each item satisfies the corresponding predicate."]}),"\n",(0,a.jsx)(s.Z,{name:"toContainSequenceSatisfying",children:'\nconst array = [1, 1, 2, 3];\nconst set = new Set(array);\n\nit("is an iterable that contains the exact sequence of values", () => {\n  expect(array).toContainSequenceSatisfying(\n    (value) => value === 1,\n    (value) => value === 2\n  );\n  expect(set).toContainSequenceSatisfying(\n    (value) => value === 1,\n    (value) => value === 2\n  );\n});\n'})]})}function h(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);