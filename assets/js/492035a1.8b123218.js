"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[250],{208:(e,t,c)=>{c.r(t),c.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>h});var a=c(2540),s=c(3023),n=c(2317);const i={sidebar_position:1},r="expect.exactly(value)",l={id:"matchers/exactly",title:"expect.exactly(value)",description:"An asymmetric matcher that checks if the received value is exactly equal to the expected value, using Object.is.",source:"@site/docs/matchers/exactly.mdx",sourceDirName:"matchers",slug:"/matchers/exactly",permalink:"/mix-n-matchers/matchers/exactly",draft:!1,unlisted:!1,editUrl:"https://github.com/EskiMojo14/mix-n-matchers/tree/main/website/docs/matchers/exactly.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docs",previous:{title:"Setup",permalink:"/mix-n-matchers/"},next:{title:"expect.typeOf(type)",permalink:"/mix-n-matchers/matchers/typeOf"}},o={},h=[];function x(e){const t={code:"code",h1:"h1",p:"p",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"expectexactlyvalue",children:(0,a.jsx)(t.code,{children:"expect.exactly(value)"})}),"\n",(0,a.jsxs)(t.p,{children:["An asymmetric matcher that checks if the received value is exactly equal to the expected value, using ",(0,a.jsx)(t.code,{children:"Object.is"}),"."]}),"\n",(0,a.jsx)(t.p,{children:"Useful for situations where deep equality would typically be used, but you want to ensure that the values are the same reference."}),"\n",(0,a.jsx)(n.Z,{name:"exactly",children:'\nconst ref = {}\nconst mock = jest.fn();\nmock(ref);\n\nit("is exactly equal", () => {\n  expect(mock).toHaveBeenCalledWith(expect.exactly(ref));\n  expect(mock).not.toHaveBeenCalledWith(expect.exactly({}));\n\n  // this would normally pass\n  expect(mock).toHaveBeenCalledWith({});\n});\n'})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(x,{...e})}):x(e)}}}]);